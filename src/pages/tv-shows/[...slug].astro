---
import { CollectionEntry, getCollection } from "astro:content";
import getReadingTime from "reading-time";
import { clsx } from "clsx";

import Share from "@components/content/share.vue";
import Quotes from "@components/content/quotes.vue";
import JpHeading from "@components/jp-heading.vue";
import Staff from "@components/content/staff.vue";
import Characters from "@components/content/characters.vue";
import BgGradientBox from "@components/hero-image-box.vue";

import Layout from "@layouts/Layout.astro";

import { IMediaItem } from "@utils/ts/aniListApiTypes";
import { contentPageQuery } from "@utils/queries";
import container from "@components/primitives/container";
import Link from "@components/link.astro";

export async function getStaticPaths() {
  const tvShows = await getCollection("tv-shows");

  return tvShows.map((entry, index) => {
    const nextTvShow = tvShows[index + 1];
    const previousTvShow = tvShows[index - 1];

    return {
      params: {
        slug: entry.slug,
      },
      props: { entry: entry, next: nextTvShow, previous: previousTvShow },
    };
  });
}

interface Props {
  entry: CollectionEntry<"tv-shows">;
  next: CollectionEntry<"tv-shows"> | null;
  previous: CollectionEntry<"tv-shows"> | null;
}

const { entry, next, previous } = Astro.props;
const {
  characterQuotes,
  nativeTitle,
  img,
  preface,
  rating,
  releaseDate,
  scores,
  title,
} = entry.data;
const { Content } = await entry.render();
const url = Astro.url;
const readingTime = getReadingTime(entry.body);

const response = await fetch("https://graphql.anilist.co", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    query: contentPageQuery(entry.data.title),
  }),
});

const json = await response.json();
const tvShowData = json?.data as IMediaItem;

const {
  genres,
  characters,
  bannerImage,
  duration,
  studios,
  startDate,
  tags,
  averageScore,
  episodes,
  idMal,
  reviews,
  siteUrl,
  staff,
  trailer,
} = tvShowData?.Media;

console.log(tvShowData);
---

<Layout title={entry.data.title}>
  <BgGradientBox img={bannerImage}>
    <h1 class="relative mt-14 w-full text-7xl">
      <span class="font-bold">{title}</span>
      <JpHeading top="25%">
        {nativeTitle}
      </JpHeading>
    </h1>
    <h4 class="py-4">
      {preface}
    </h4>
    <div>
      <p>{genres.join(", ").toLowerCase()}</p>
    </div>
  </BgGradientBox>

  <div class={`${container()} mt-32`}>
    <div>
      <h2 class="text-xl">
        At {startDate.day}/{startDate.month}/{startDate.year}
        the world could enjoy this entertainment piece.
      </h2>

      <h2>
        about duration and time related things, well this a movie so the lenght
        of it is about {duration} minutes.
      </h2>

      <h2>
        about duration and time related things, well this a movie so the lenght
        of it is about {duration} minutes.
      </h2>

      <h2>
        this stuff was produced, mainly, by{" "}
        {studios.edges[0].node.name}.
      </h2>

      <h2>
        this stuff was produced, mainly, by{" "}
        {studios.edges[0].node.name}.
      </h2>
    </div>

    <Characters data={characters.edges} />

    <Quotes data={characterQuotes} />

    <Staff data={staff.edges} />

    <div class="py-20">
      <h1
        class="relative bg-gradient-to-r from-teal-200 to-pink-300 bg-clip-text pb-4 font-manrope text-6xl font-bold text-transparent"
      >
        <span>divagações do bobo&apos;s</span>
        <JpHeading top="25%">ボボ の 電波な奴</JpHeading>
      </h1>

      <Content />

      <img
        alt="rating illustration"
        class="h-28 w-28"
        src="/assets/images/pikachu-test.png"
      />
    </div>

    <!-- <Share
      client:load
      title={`${nativeTitle} - bobo's zoomeranime`}
      url={new URL(Astro.url.pathname, Astro.site).href}
      subjects=""
    /> -->

    <div class="py-20">
      <h1
        class="relative bg-gradient-to-r from-teal-200 to-pink-300 bg-clip-text pb-4 font-manrope text-6xl font-bold text-transparent"
      >
        <span>as palavras de outros individuos na web</span>
      </h1>

      <div>
        {
          reviews.edges.map((review) => (
            <div>
              <p>{review.node.summary}</p>
            </div>
          ))
        }
      </div>
    </div>

    <div class="flex justify-between">
      {
        previous && (
          <div
            class={clsx(
              "flex w-full justify-center md:justify-start",
              next && "md:w-auto"
            )}
          >
            <Link
              href={`tv-shows/${previous.slug}`}
              text="link para a série anterior"
              icon="bx-left-arrow-alt"
            >
              <span>série anterior</span>
            </Link>
          </div>
        )
      }

      {
        next && (
          <div
            class={clsx(
              "flex w-full justify-center md:justify-start",
              previous && "md:w-auto"
            )}
          >
            <Link
              href={`movies/${next.slug}`}
              text="link para a série anterior"
              icon="bx-right-arrow-alt"
              iconPos="right"
            >
              <span class="mr-1">próxima série</span>
            </Link>
          </div>
        )
      }
    </div>

    <!-- say source from the animes in anilist API -->
  </div>
</Layout>
