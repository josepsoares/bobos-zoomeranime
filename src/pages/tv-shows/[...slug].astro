---
import { CollectionEntry, getCollection } from "astro:content";
import getReadingTime from "reading-time";
import { clsx } from "clsx";

import Share from "@components/content/share.vue";
import Quotes from "@components/content/quotes.vue";
import JpHeading from "@components/jpHeading.vue";
import Staff from "@components/content/staff.astro";
import Characters from "@components/content/characters.vue";
import BgGradientBox from "@components/BgGradientBox.vue";
import BlueGradientCard from "@components/blueGradientCard.astro";

import Layout from "@layouts/Layout.astro";
import LeftArrow from "@icons/bx-left-arrow-alt.svg";
import RightArrow from "@icons/bx-right-arrow-alt.svg";
import StarHalf from "@icons/bxs-star-half.svg";
import Star from "@icons/bxs-star.svg";

import { IMediaItem } from "@utils/ts/aniListApiTypes";
import { contentPageQuery } from "@utils/queries";
import container from "@components/primitives/container";

export async function getStaticPaths() {
  const tvShows = await getCollection("tv-shows");

  return tvShows.map((entry, index) => {
    const nextTvShow = tvShows[index + 1];
    const previousTvShow = tvShows[index - 1];

    return {
      params: {
        slug: entry.slug,
      },
      props: { entry: entry, next: nextTvShow, previous: previousTvShow },
    };
  });
}

interface Props {
  entry: CollectionEntry<"tv-shows">;
  next: CollectionEntry<"tv-shows"> | null;
  previous: CollectionEntry<"tv-shows"> | null;
}

const { entry, next, previous } = Astro.props;
const {
  characterQuotes,
  nativeTitle,
  img,
  preface,
  rating,
  releaseDate,
  scores,
  title,
} = entry.data;
const { Content } = await entry.render();
const url = Astro.url;
const readingTime = getReadingTime(entry.body);

const response = await fetch("https://graphql.anilist.co", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    query: contentPageQuery(entry.data.title),
  }),
});

const json = await response.json();
const tvShowData = json?.data as IMediaItem;

const {
  genres,
  characters,
  bannerImage,
  duration,
  studios,
  startDate,
  tags,
  averageScore,
  episodes,
  idMal,
  reviews,
  siteUrl,
  staff,
  trailer,
} = tvShowData?.Media;

console.log(tvShowData);
---

<Layout title={entry.data.title}>
  <BgGradientBox img={bannerImage}>
    <h1>
      <span>{title}</span>
      <JpHeading top="25%">
        {nativeTitle}
      </JpHeading>
    </h1>
    <h4 class="py-4">
      {preface}
    </h4>
    <div>
      <p>{genres.join(", ").toLowerCase()}</p>
    </div>
    <BlueGradientCard>
      <div class="grid grid-cols-1 justify-center gap-4 p-4 md:grid-cols-2">
        <div>
          <p>
            At {startDate.day}/{startDate.month}/{startDate.year}
            the world could enjoy this entertainment piece.
          </p>
        </div>
        <div>
          <p>
            about duration and time related things, well this a movie so the
            lenght of it is about {duration} minutes.
          </p>
        </div>

        <div>
          <p>
            this stuff was produced, mainly, by{" "}
            {studios.edges[0].node.name}.
          </p>
        </div>
        <div>
          <p>to finish this off, let&apos;s talk about genres: .</p>
        </div>
      </div>
    </BlueGradientCard>
  </BgGradientBox>

  <div class={container()}>
    <div class="grid grid-cols-1 gap-4 py-20 md:grid-cols-2">
      <Characters data={characters.edges} />
      <Staff data={staff.edges} />
    </div>

    <div class="py-20">
      <h1>
        <span>divagações do bobo&apos;s</span>
        <JpHeading top="25%">ボボ の 電波な奴</JpHeading>
      </h1>
    </div>

    <Quotes data={characterQuotes} />

    <div class="py-20">
      <h1>
        <span>veredicto bobo&apos;s</span>
        <JpHeading>ボボ の 評決</JpHeading>
      </h1>
      <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
        <h2 class="py-6">{rating.text}</h2>
        <img
          alt="rating illustration"
          class="h-28 w-28"
          src="/assets/images/pikachu-test.png"
        />
      </div>
    </div>

    <!-- <Share
      client:load
      title={`${nativeTitle} - bobo's zoomeranime`}
      url={new URL(Astro.url.pathname, Astro.site).href}
      subjects=""
    /> -->

    <div class="flex justify-between">
      {
        previous && (
          <div
            class={clsx(
              "flex w-full justify-center md:justify-start",
              next && "md:w-auto"
            )}
          >
            <button>
              <a href={`movies/${previous}`}>
                <LeftArrow />
                <span>série anterior</span>
              </a>
            </button>
          </div>
        )
      }

      {
        next && (
          <div
            class={clsx(
              "flex w-full justify-center md:justify-start",
              previous && "md:w-auto"
            )}
          >
            <a href={`tv-shows/${next}`}>
              <button>
                <span class="mr-1">próxima série</span>
                <RightArrow />
              </button>
            </a>
          </div>
        )
      }
    </div>
  </div>
</Layout>
